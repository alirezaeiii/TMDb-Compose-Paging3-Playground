plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
}

def appVersion = (new File(project.rootDir, 'version.txt')).text.trim()

ext.generateVersionCode = { versionName ->
    def (versionMajor, versionMinor, versionPatch) = versionName.tokenize(".")
    Integer versionCode = versionMajor.toInteger() * 100000000 + versionMinor.toInteger() * 10000 + versionPatch.toInteger()
    logger.info('Version code based on version {}: {}', versionName, versionCode)
    return versionCode
}

android {
    defaultConfig {
        applicationId AppMetaData.id
        minSdk AppMetaData.minSdkVersion
        targetSdk AppMetaData.targetSdkVersion
        compileSdk AppMetaData.compileSdkVersion
        versionCode generateVersionCode(appVersion)
        versionName appVersion
        buildConfigField "String", "TMDB_API_KEY", "\"${getProperty("local.properties", "tmdb_api_key") ?: System.getenv("TMDB_API_KEY")}\""
        buildConfigField "String", "TMDB_BASE_URL", "\"http://api.themoviedb.org/\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.0'
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
    namespace 'com.sample.tmdb'
}

dependencies {
    implementation project(path: BuildModules.CORE)

    implementation Deps.androidxCore
    implementation Deps.lifecycle
    implementation Deps.lifecycleLiveData

    implementation Deps.appCompat
    implementation Deps.material
    implementation Deps.palette
    implementation Deps.browser

    implementation Deps.composeUi
    implementation Deps.composeMaterial
    implementation Deps.composeFoundation
    implementation Deps.composeUiToolingPreview
    implementation Deps.composeActivity
    implementation Deps.navigationCompose
    implementation Deps.composeConstraintLayout
    implementation Deps.iconExtended
    implementation Deps.composePaging
    implementation Deps.systemUiController
    debugImplementation Deps.composeUiTooling

    implementation Deps.hilt
    kapt Deps.hilt_compiler
    implementation Deps.hilt_compose

    implementation Deps.retrofit
    implementation Deps.retrofitMoshi
    implementation Deps.okhttpInterceptor
    implementation Deps.moshi
    implementation Deps.moshiKotlin
    kapt Deps.moshiCodegen
    implementation Deps.coroutinesCore
    implementation Deps.coroutinesAndroid

    implementation Deps.coil
    implementation Deps.gson

    implementation Deps.room
    implementation Deps.roomKtx
    kapt Deps.roomCompiler
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}